net {
  //  type = mainnet
  type = testnet
}


storage {
  # Directory for storing persistent data

  db.engine = "LEVELDB"
  db.directory = "database",
  index.directory = "index",

  # You can custom these 14 databases' configs:

  # account, account-index, asset-issue, block, block-index,
  # block_KDB, peers, properties, recent-block, trans,
  # utxo, votes, witness, witness_schedule.

  # Otherwise, db configs will remain defualt and data will be stored in
  # the path of "output-directory" or which is set by "-d" ("--output-directory").

  # Attention: name is a required field that must be set !!!
  properties = [
    //    {
    //      name = "account",
    //      path = "storage_directory_test",
    //      createIfMissing = true,
    //      paranoidChecks = true,
    //      verifyChecksums = true,
    //      compressionType = 1,        // compressed with snappy
    //      blockSize = 4096,           // 4  KB =         4 * 1024 B
    //      writeBufferSize = 10485760, // 10 MB = 10 * 1024 * 1024 B
    //      cacheSize = 10485760,       // 10 MB = 10 * 1024 * 1024 B
    //      maxOpenFiles = 100
    //    },
    //    {
    //      name = "account-index",
    //      path = "storage_directory_test",
    //      createIfMissing = true,
    //      paranoidChecks = true,
    //      verifyChecksums = true,
    //      compressionType = 1,        // compressed with snappy
    //      blockSize = 4096,           // 4  KB =         4 * 1024 B
    //      writeBufferSize = 10485760, // 10 MB = 10 * 1024 * 1024 B
    //      cacheSize = 10485760,       // 10 MB = 10 * 1024 * 1024 B
    //      maxOpenFiles = 100
    //    },
    //    { # only for unit test
    //      name = "test_name",
    //      path = "test_path",
    //      createIfMissing = false,
    //      paranoidChecks = false,
    //      verifyChecksums = false,
    //      compressionType = 1,
    //      blockSize = 2,
    //      writeBufferSize = 3,
    //      cacheSize = 4,
    //      maxOpenFiles = 5
    //    },
  ]

  needToUpdateAsset = false
  snapshot.maxFlushCount = 200

  # the estimated number of block transactions (default 1000, min 100, max 10000).
  # so the total number of cached transactions is 65536 * txCache.estimatedTransactions
  txCache.estimatedTransactions = 50
  # if true, transaction cache initialization will be faster. default false
  txCache.initOptimization = true

  # data root setting, for check data, currently, only reward-vi is used.

  merkleRoot = {
    reward-vi = e0ebe2f3243391ed674dff816a07f589a3279420d6d88bc823b6a9d5778337ce
   }

}

node.discovery = {
  enable = true
  persist = true
  external.ip = "46.168.1.1"
}

node {

  trustNode = "127.0.0.1:50051"

  listen.port = 18888

  connection.timeout = 2

  active = [
    # Sample entries:
    # { url = "enode://<hex nodeID>@hostname.com:30303" }
    # {
    #    ip = hostname.com
    #    port = 30303
    #    nodeId = e437a4836b77ad9d9ffe73ee782ef2614e6d8370fcf62191a6e488276e23717147073a7ce0b444d485fff5a0c34c4577251a7a990cf80d8542e21b95aa8c5e6c
    # }
  ]
  inactiveThreshold = 600 //seconds

  p2p {
    version = 43 # 43: testnet; 101: debug
  }

  http {
      fullNodeEnable = true
      fullNodePort = 8090
      solidityEnable = true
      solidityPort = 8091
  }

  # use your ipv6 address for node discovery and tcp connection, default false
  enableIpv6 = false

  # if your node's highest block num is below than all your pees', try to acquire new connection, default false
  effectiveCheckEnable = false

  dns {
    # dns urls to get nodes, url format tree://{pubkey}@{domain}, default empty
    treeUrls = [
      #"tree://APFGGTFOBVE2ZNAB3CSMNNX6RRK3ODIRLP2AA5U4YFAA6MSYZUYTQ@nodes1.example.org",
    ]

    # enable or disable dns publish, default false
    publish = false

    # dns domain to publish nodes, required if publish is true
    dnsDomain = "nodes1.example.org"

    # dns private key used to publish, required if publish is true, hex string of length 64
    dnsPrivate = "b71c71a67e1177ad4e901695e1b4b9ee17ae16c6668d313eac2f96dbcda3f291"

    # known dns urls to publish if publish is true, url format tree://{pubkey}@{domain}, default empty
    knownUrls = [
      #"tree://APFGGTFOBVE2ZNAB3CSMNNX6RRK3ODIRLP2AA5U4YFAA6MSYZUYTQ@nodes2.example.org",
    ]

    staticNodes = [
     # static nodes to published on dns
     # Sample entries:
     # "ip:port",
     # "ip:port"
    ]

    # merge several nodes into a leaf of tree, should be 1~5
    maxMergeSize = 5

    # only nodes change percent is bigger then the threshold, we update data on dns
    changeThreshold = 0.1

    # dns server to publish, required if publish is true, only aws or aliyun is support
    serverType = "aws"

    # access key id of aws or aliyun api, required if publish is true, string
    accessKeyId = "your-key-id"

    # access key secret of aws or aliyun api, required if publish is true, string
    accessKeySecret = "your-key-secret"

    # if publish is true and serverType is aliyun, it's endpoint of aws dns server, string
    aliyunDnsEndpoint = "alidns.aliyuncs.com"

    # if publish is true and serverType is aws, it's region of aws api, such as "eu-south-1", string
    awsRegion = "us-east-1"

    # if publish is true and server-type is aws, it's host zone id of aws's domain, string
    awsHostZoneId = "your-host-zone-id"
  }

  rpc {
    port = 50051

    PBFTPort = 50072

    # Number of gRPC thread, default availableProcessors / 2
    # thread = 16

    # The maximum number of concurrent calls permitted for each incoming connection
    # maxConcurrentCallsPerConnection =

    # The HTTP/2 flow control window, default 1MB
    # flowControlWindow =

    # Connection being idle for longer than which will be gracefully terminated
    maxConnectionIdleInMillis = 60000

    # Connection lasting longer than which will be gracefully terminated
    # maxConnectionAgeInMillis =

    # The maximum message size allowed to be received on the server, default 4MB
    # maxMessageSize =

    # The maximum size of header list allowed to be received, default 8192
    # maxHeaderListSize =

    # The switch of the reflection service, effective for all gRPC services
    reflectionService = true
  }

}

sync {
  node.count = 30
}

seed.node = {
  # List of the seed nodes
  # Seed nodes are stable full nodes
  # example:
  # ip.list = [
  #   "ip:port",
  #   "ip:port"
  # ]
  ip.list = [
    "47.254.16.55:18888",
    "47.254.18.49:18888",
    "18.188.111.53:18888",
    "54.219.41.56:18888",
    "35.169.113.187:18888",
    "34.214.241.188:18888",
    "47.254.146.147:18888",
    "47.254.144.25:18888",
    "47.91.246.252:18888",
    "47.91.216.69:18888",
    "39.106.220.120:18888"
  ]
}

genesis.block = {
  # Reserve balance
  assets = [
    # {
    #   accountName = "tron"
    #   accountType = "AssetIssue" # Normal/AssetIssue/Contract
    #   address = "27V2x39zmmJeVGBGSheAk1281z8svbWgn6C"
    #   balance = "10"
    # }
    {
      accountName = "Devaccount"
      accountType = "AssetIssue"
      address = "27d3byPxZXKQWfXX7sJvemJJuv5M65F3vjS"
      balance = "10000000000000000"
    },
    {
      accountName = "Zion"
      accountType = "AssetIssue"
      address = "27fXgQ46DcjEsZ444tjZPKULcxiUfDrDjqj"
      balance = "15000000000000000"
    },
    {
      accountName = "Sun"
      accountType = "AssetIssue"
      address = "27SWXcHuQgFf9uv49FknBBBYBaH3DUk4JPx"
      balance = "10000000000000000"
    },
    {
      accountName = "Blackhole"
      accountType = "AssetIssue"
      address = "27WtBq2KoSy5v8VnVZBZHHJcDuWNiSgjbE3"
      balance = "-9223372036854775808"
    }
  ]

  witnesses = [
    {
      address: 27Ssb1WE8FArwJVRRb8Dwy3ssVGuLY8L3S1
      url = "http://Mercury.org",
      voteCount = 105
    },
    {
      address: 27anh4TDZJGYpsn4BjXzb7uEArNALxwiZZW
      url = "http://Venus.org",
      voteCount = 104
    },
    {
      address: 27Wkfa5iEJtsKAKdDzSmF1b2gDm5s49kvdZ
      url = "http://Earth.org",
      voteCount = 103
    },
    {
      address: 27bqKYX9Bgv7dgTY7xBw5SUHZ8EGaPSikjx
      url = "http://Mars.org",
      voteCount = 102
    },
    {
      address: 27fASUY6qKtsaAEPz6QxhZac2KYVz2ZRTXW
      url = "http://Jupiter.org",
      voteCount = 101
    },
    {
      address: 27Q3RSbiqm59VXcF8shQWHKbyztfso5FwvP
      url = "http://Saturn.org",
      voteCount = 100
    },
    {
      address: 27YkUVSuvCK3K84DbnFnxYUxozpi793PTqZ
      url = "http://Uranus.org",
      voteCount = 99
    },
    {
      address: 27kdTBTDJ16hK3Xqr8PpCuQJmje1b94CDJU
      url = "http://Neptune.org",
      voteCount = 98
    },
    {
      address: 27mw9UpRy7inTMQ5kUzsdTc2QZ6KvtCX4uB
      url = "http://Pluto.org",
      voteCount = 97
    },
    {
      address: 27QzC4PeQZJ2kFMUXiCo4S8dx3VWN5U9xcg
      url = "http://Altair.org",
      voteCount = 96
    },
    {
      address: 27VZHn9PFZwNh7o2EporxmLkpe157iWZVkh
      url = "http://AlphaLyrae.org",
      voteCount = 95
    }
  ]

  timestamp = "0" #2017-8-26 12:00:00

  parentHash = "0x0000000000000000000000000000000000000000000000000000000000000000"
}


// Optional.The default is empty.
// It is used when the witness account has set the witnessPermission.
// When it is not empty, the localWitnessAccountAddress represents the address of the witness account,
// and the localwitness is configured with the private key of the witnessPermissionAddress in the witness account.
// When it is empty,the localwitness is configured with the private key of the witness account.

//localWitnessAccountAddress =

localwitness = [

]

block = {
  needSyncCheck = true # first node : false, other : true
}

vm = {
  supportConstant = true
  minTimeRatio = 0.0
  maxTimeRatio = 5.0

  # In rare cases, transactions that will be within the specified maximum execution time (default 10(ms)) are re-executed and packaged
  # longRunningTime = 10
}
committee = {
  allowCreationOfContracts = 1  //mainnet:0 (reset by committee),test:1
}

rate.limiter.global.qps = 1000
rate.limiter.global.ip.qps = 1000
rate.limiter.global.api.qps = 100
rate.limiter.http = [
  {
    component = "GetNowBlockServlet",
    strategy = "GlobalPreemptibleAdapter",
    paramString = "permit=1"
  }
]

node.dynamicConfig.enable = true
node.dynamicConfig.checkInterval = 0