apply plugin: 'com.google.protobuf'

def protobufVersion = '3.25.5'
def grpcVersion = '1.52.1'

dependencies {
    api group: 'com.google.protobuf', name: 'protobuf-java', version: protobufVersion
    api group: 'com.google.protobuf', name: 'protobuf-java-util', version: protobufVersion
    api group: 'net.jcip', name: 'jcip-annotations', version: '1.0'

//    checkstyleConfig "com.puppycrawl.tools:checkstyle:${versions.checkstyle}"
    // google grpc
    api group: 'io.grpc', name: 'grpc-netty', version: grpcVersion
    api group: 'io.grpc', name: 'grpc-protobuf', version: grpcVersion
    api group: 'io.grpc', name: 'grpc-stub', version: grpcVersion
    api group: 'io.grpc', name: 'grpc-services', version: grpcVersion

    // end google grpc

    api group: 'com.google.api.grpc', name: 'proto-google-common-protos', version: '2.15.0'
}

tasks.matching { it instanceof Test }.all {
    testLogging.events = ["failed", "passed", "skipped"]
}

sourceSets {
    main {
        proto {
            srcDir 'src/main/protos'
        }
        java {
            srcDir 'src/main/gen'
            srcDir 'src/main/java'
        }
    }

}

protobuf {
    generatedFilesBaseDir = "$projectDir/src/"
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }

    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java { outputSubDir = "java" }
            }
        }
        all()*.plugins {
            grpc {
                outputSubDir = "java"
            }
        }
    }
}

clean.doFirst {
    delete "src/main/java"
}

